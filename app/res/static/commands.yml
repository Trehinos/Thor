# ######################################################################################################################
# General commands
help:
    class: Thor\Framework\Commands\Help
    description: 'displays a list of all available commands or a command detail'
    arguments:
        command:
            description: 'if specified, displays details of this command'

project/document:
    class: Thor\Framework\Commands\Project
    description: "generates documentation of a project"
    options:
        namespace:
            hasValue: true
            description: (default 'Thor')
        folder:
            hasValue: true
            description: (default 'thor')
        target:
            hasValue: true
            description: "(default 'github') values : github|gitlab"
        verbose:
            hasValue: false
            description: echoes the generated markdown

# ######################################################################################################################
# Daemon commands
daemon/run:
    class: Thor\Framework\Commands\Daemon\Run
    description: 'run a daemon'
    arguments:
        name:
            description: 'the daemon name'
            required: true

daemon/status:
    class: Thor\Framework\Commands\Daemon\Status
    description: 'displays the status of a daemon. Either the daemon name or the --all option has to be specified.'
    arguments:
        name:
            description: 'the daemon name'
    options:
        all:
            description: 'displays a table of all the statuses of daemons'
            hasValue: false

daemon/state:
    class: Thor\Framework\Commands\Daemon\State
    description: 'change the state of a daemon.'
    arguments:
        name:
            description: 'the daemon name'
            required: true
    options:
        enable:
            description: 'enable the daemon'
            hasValue: false
        disable:
            description: 'disable the daemon'
            hasValue: false
        reset:
            description: 'reset the daemon status'
            hasValue: false

daemon/kill:
    class: Thor\Framework\Commands\Daemon\Kill
    description: 'stops the execution of a daemon'
    arguments:
        name:
            description: 'the daemon name'
            required: true

# ######################################################################################################################
# User commands
user/create:
    class: Thor\Framework\Commands\User\Create
    description: 'create a new user in DB. If password is omitted a random one will be affected to the user and displayed'
    arguments:
        username:
            required: true
            description: 'user''s login'
    options:
        password:
            hasValue: true
            description: 'user''s clear password. Will be hashed before insertion'

user/list:
    class: Thor\Framework\Commands\User\UserList
    description: 'list all users in DB'
    options:
        search:
            hasValue: true
            description: 'User login search request'

user/edit:
    class: Thor\Framework\Commands\User\Edit
    description: 'create a new user in DB'
    arguments:
        pid:
            required: true
            description: 'user''s PID. Needed to identify the user in DB'
    options:
        username:
            hasValue: true
            description: 'user''s new login'
        password:
            hasValue: true
            description: 'user''s new clear password. Will be hashed before insertion'

user/delete:
    class: Thor\Framework\Commands\User\Delete
    description: 'delete an existing user in DB'
    arguments:
        pid:
            required: true
            description: 'user''s PID. Needed to identify the user in DB'

# ######################################################################################################################
# Core commands

core/setup:
    class: Thor\Framework\Commands\Core\Setup
    description: 'create the PdoRows tables'
    options:
        database:
            hasValue: true
            description: '(default = default)'

core/install:
    class: Thor\Framework\Commands\Core\Install
    description: 'run thor/setup then migrations'

core/update:
    class: Thor\Framework\Commands\Core\Update
    description: 'run the update process'

database/migrate:
    class: Thor\Framework\Commands\Core\Migrate
    description: 'run a migration file with multiple SQL queries'
    options:
        index:
            hasValue: true
            description: 'the new migration index'

env/set:
    class: Thor\Framework\Commands\Core\SetEnv
    description: 'set the environment'
    arguments:
        env:
            required: true
            description: 'PROD | DEBUG | DEV'
            
core/repl:
    class: Thor\Cli\Repl
    command: repl
    description: "launch a REPL"

clear/cache:
    class: Thor\Framework\Commands\Core\ClearCache
    description: 'clear the cache'
    options:
        ttl:
            hasValue: true
            description: 'if specified, only delete file older than ttl (in minutes)'

clear/logs:
    class: Thor\Framework\Commands\Core\ClearLogs
    description: 'clear all logs'
    options:
        env:
            hasValue: true
            description: 'prod|verbose|debug|[dev] : the environment to clear'
        ttl:
            hasValue: true
            description: 'if specified, only delete file older than ttl (in minutes)'

route/list:
    class: Thor\Framework\Commands\Http\RoutesList
    description: 'list all routes in app/res/static/routes.yml'

test:
    class: June\Test
    description: 'test'
